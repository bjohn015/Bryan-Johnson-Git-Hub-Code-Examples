/*
    Bryan Johnson
    Final Exam 361
    Jay Morris
    12/5/2020
*/

#include<bits/stdc++.h>
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;

# define INFINITE INT_MAX

typedef pair<int, int> intpair;


class Graph
{
        int V; // V represent the number of vertice

        list< pair<int, int> > *adj; // For storing size of every pair of size graph

public:
        Graph(int V); // Graph constructor to create the graph of the image in the question

        void add_edge(int u, int v, int w); // This function will add the edges in graph

        void shortestPath(int s);
};

Graph::Graph(int V)
{
        this->V = V;
        adj = new list<intpair> [V];
}

void Graph::add_edge(int u, int v, int w)
{
        adj[u].push_back(make_pair(v, w));
        adj[v].push_back(make_pair(u, w));
}

// Prints shortest paths from source to all other vertice
void Graph::shortestPath(int source)
{

        priority_queue< intpair, vector <intpair> , greater<intpair> > pq;

        vector<int> distance(V, INFINITE);

        pq.push(make_pair(0, source));
        distance[source] = 0;

        while (!pq.empty())
        {

                int u = pq.top().second;
                pq.pop();

                list< pair<int, int> >::iterator it;
                for (it = adj[u].begin(); it != adj[u].end(); ++it)
                {


                        int v = (*it).first;
                        int size = (*it).second;


                        if (distance[v] > distance[u] + size)
                        {

                                distance[v] = distance[u] + size;
                                pq.push(make_pair(distance[v], v));
                        }
                }
        }

        // Print shortest distances
        printf("Vertex Distance: \n");
        for (int i = 0; i < V; ++i){
                cout<<"Shortest Path from A to "<<(char)(i+65)<<"\t\t"<<distance[i]<<"\n";
        }
}

int main()
{

        int V = 11;
        Graph g(V);

        // creating graph from quesiton 1
        g.add_edge(0, 1, 3);
        g.add_edge(0, 2, 4);
        g.add_edge(0, 5, 8);
        g.add_edge(1, 3, 6);
        g.add_edge(1, 9, 8);
        g.add_edge(2, 5, 3);
        g.add_edge(3, 4, 3);
        g.add_edge(3, 6, 5);
        g.add_edge(3, 7, 6);
        g.add_edge(4, 6, 4);
        g.add_edge(5, 7, 8);
        g.add_edge(5, 10, 7);
        g.add_edge(6, 9, 8);
        g.add_edge(6, 8, 2);
        g.add_edge(7, 8, 7);
        g.add_edge(8, 9, 6);
        g.add_edge(9, 10, 8);

        g.shortestPath(0);

        return 0;
}
