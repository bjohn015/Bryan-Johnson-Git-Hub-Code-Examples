
#include <iostream>
#include <random>
#include <list>
#include <string>
#include <fstream>
using namespace std;
// this question has a computational complexity of O(N^3)

list<string> subString(char str[],int n){
  list<string> list_substrings;
  string temp="";
  for(int size=1;size<=n;size++)
   {
    for(int i=0;i<=n-size;i++)
    {
      int j=i+size-1;
      for(int k=i;k<=j;k++)
      {
	temp+=str[k];
      }
      list_substrings.push_back(temp);
      temp="";
    }
  }
  return list_substrings;
}

//O(n^2)
list<string> randomchar(int letter,int n){
  list<string> charList;
  string temp="";
  for(int i=0;i<n;i++)
   {
    for(int j=0;j<=i;j++)
    {
      temp+=letter;
    }
   charList.push_back(temp);
   temp="";
  }
  return charList;
}


int main(){
  char str[]="abcdefghijklmnopqrstuvwxyz";

  //O(n^3)
  list<string> letters_stringlist=subString(str,26);
  list<string> sol;

  list<string>::iterator it;
  list<string>::iterator jt;
  list<list<string>>::iterator listOflistIterator;
  
  default_random_engine* gen;
  gen=new default_random_engine(time(NULL));
  uniform_int_distribution<int> distribution(97,122);
  
  cout<<"Enter how many random characters you want : ";
  int n;
  cin>>n;
  char randString[n];
 
  int j=0;
  for(int i=0;i<n;i++)
    {
    if(j==25){
      cout<<endl;
      j=0;
    }
    j++;
    char num=distribution(*gen);
    cout<<num<<" ";
    randString[i]=num;
  }
  cout<<endl;
  list<list<string>>listOfCharLists;
 
  for(int i=0;i<26;i++)
  {
   list<string> temp=randomchar('a'+i,n);
   listOfCharLists.push_back(temp);
  }
  
  list<string> rand_stringlist=subString(randString,n);

  listOflistIterator=listOfCharLists.begin();

  while(listOflistIterator!=listOfCharLists.end())
   {
    it=(*listOflistIterator).begin();

    while(it!=(*listOflistIterator).end())
     {
      jt=rand_stringlist.begin();

      while(jt!=rand_stringlist.end())
      {
	if(((*jt)==(*it))&&(*jt).size()>1)

	  cout<<*it<<endl;

	jt++;
      }
      it++;
    }
    listOflistIterator++;
  }

  it=letters_stringlist.begin();

  while(it!=letters_stringlist.end())
   {
    jt=rand_stringlist.begin();
    while(jt!=rand_stringlist.end())
    {
      if(((*jt)==(*it))&&(*jt).size()>1)
	
	cout<<*it<<endl;

      jt++;
    }
    it++;
  }
  return 0;
}
